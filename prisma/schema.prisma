generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

enum PaymentType {
  credit
  debit
  transference
  mobile_pay
  cash
}

enum Money {
  Bs
  Dls
  Eur
}

enum InvitationState {
  PENDING
  CANCELED
  ACCEPTED
}

model client_feedbacks {
  id         String    @id @unique @default(uuid())
  client_id  String    @unique
  org_id     String    @unique
  rating     BigInt
  comment    String
  created_at DateTime? @default(now())
  clients    clients   @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clients_feedbacks")
  orgs       orgs      @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_feedbacks")
}

model clients {
  id               String             @id @unique @default(uuid())
  org_id           String             @unique
  doc_num          String             @unique()
  full_name        String             @unique()
  created_at       DateTime?          @default(now())
  update_at        DateTime?          @updatedAt
  client_feedbacks client_feedbacks[]
  orgs             orgs               @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_clients")
  orders           orders[]
}

model debt_types {
  id    String @id @unique @default(uuid())
  name  String @unique() @db.VarChar(50)
  debts debts?
}

model debts {
  id           String      @id @unique @default(uuid())
  debt_type    String      @db.VarChar(20)
  payment_type PaymentType
  money_type   Money
  amount       Float?
  created_at   DateTime?   @default(now())
  debt_type_id String      @unique()
  org_id       String      @unique
  debt_types   debt_types  @relation(fields: [debt_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_debts_debt_type")
  orgs         orgs        @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_debts")
}

model employees {
  id         String    @id @unique @default(uuid())
  org_id     String
  user_id    String
  doc_num    String?   @unique()
  role       Roles     @default(USER)
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  orgs       orgs      @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_employees")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_employees")

  @@unique([org_id, user_id], map: "unique_org_user")
}

model income_types {
  id      String   @id @unique @default(uuid())
  name    String   @unique() @db.VarChar(50)
  incomes incomes?
}

model incomes {
  id             String       @id @unique @default(uuid())
  income_type    String       @db.VarChar(20)
  payment_type   PaymentType
  money_type     Money
  amount         Float?
  created_at     DateTime?    @default(now())
  income_type_id String       @unique()
  org_id         String       @unique
  income_types   income_types @relation(fields: [income_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_incomes_income_type")
  orgs           orgs         @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_incomes")
}

model metrics {
  id           String @id @unique @default(uuid())
  month        BigInt
  year         BigInt
  total_income Float  @default(0)
  total_debts  Float  @default(0)
  income_count BigInt @default(0)
  debt_count   BigInt @default(0)
  org_id       String @unique()
  orgs         orgs   @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_metrics")
}

model orders {
  id           String      @id @unique @default(uuid())
  org_id       String      @unique
  client_id    String      @unique
  total_amount Float?
  payment_type PaymentType
  money_type   Money
  created_at   DateTime?   @default(now())
  update_at    DateTime?   @updatedAt
  clients      clients     @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_client")
  orgs         orgs        @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_org")
  products     products[]
}

model org_invitations {
  id         String          @id @unique @default(uuid())
  user_id    String
  org_id     String
  created_at DateTime?       @default(now())
  update_at  DateTime?       @updatedAt
  state      InvitationState @default(PENDING)
  orgs       orgs            @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_invitations")
  users      users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_invitations")

  @@unique([org_id, user_id], map: "unique_org_user_inv")
  @@index([org_id], map: "idx_org_invitations_org_id")
  @@index([user_id], map: "idx_org_invitations_user_id")
}

model orgs {
  id               String             @id @unique @default(uuid())
  founder_id       String             @unique
  name             String
  created_at       DateTime?          @default(now())
  update_at        DateTime?          @updatedAt
  client_feedbacks client_feedbacks[]
  clients          clients[]
  debts            debts[]
  employees        employees[]
  incomes          incomes[]
  metrics          metrics?
  orders           orders[]
  org_invitations  org_invitations[]
  users            users              @relation(fields: [founder_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_organizations")
  products         products[]
}

model products {
  id         String    @id @unique @default(uuid())
  org_id     String
  name       String
  code       String
  quantity   BigInt?
  price      Float?
  money_type Money?
  created_at DateTime? @default(now())
  update_at  DateTime? @updatedAt
  order_id   String?   @unique
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_products")
  orgs       orgs      @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orgs_products")

  @@unique([org_id, id, code], map: "unique_org_product_code")
  @@unique([org_id, id], map: "unique_org_product")
  @@index([org_id], map: "idx_org_products_org_id")
}

model schema_migrations {
  version BigInt  @id
  dirty   Boolean
}

model users {
  id              String            @id @unique @default(uuid())
  full_name       String
  user_name       String            @unique()
  email           String            @unique()
  password        String
  created_at      DateTime?         @default(now())
  update_at       DateTime?         @updatedAt
  role            Roles             @default(USER)
  employees       employees[]
  org_invitations org_invitations[]
  orgs            orgs[]
}
